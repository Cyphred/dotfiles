# !/bin/sh

# Prints number of all tasks, and overdue ones.
# Total number of tasks has emoji ğŸ“‹
# Number of overdue tasks has emoji âŒ›

outputToStatusbar() {
	output="ğŸ“‹$1"
	# Due today
	[ ! -z "$2" ] && [ "$2" -gt 0 ] && output+=" âŒ›$2"

	# Overdue
	[ ! -z "$3" ] && [ "$3" -gt 0 ] && output+=" ğŸ”´$3"

	printf "$output\n"
}

printMessage() {
	message="ğŸ“‹ $(generate $1) pending\n"
	[ "$2" -gt 0 ] && message+="âŒ› $(generate $2) due today\n"
	[ "$3" -gt 0 ] && message+="ğŸ”´ $(generate $2) overdue"
	notify-send "ğŸ“‹ Task module" "$message" 
}

generate() {
	case $1 in
		0) printf "No tasks" ;;
		1) printf "1 task" ;;
		*) printf "$1 tasks" ;;
	esac
}

overdue=0
dueToday=0
tasks=$(task list | awk 'END {print $(NF-1)}')
if [ "$tasks" -gt 0 ]; then
	overdueOutput=$(task overdue)
	
	# count overdue tasks that are due today
	dueToday=$(printf "$overdueOutput" | grep $(date +%Y-%m-%d) | wc -l)

	# count total overdue tasks, regardless if it's due today
	overdue=$(printf "$overdueOutput" | awk 'END {print $(NF-1)}')

	# subtract number of overdue tasks from the total task count
	let tasks=$tasks-$overdue

	# subtract tasks due today from the total overdue count
	[ "$dueToday" -gt 0 ] && let overdue=$overdue-$dueToday

	outputToStatusbar $tasks $dueToday $overdue
else
	outputToStatusbar 0
fi

[ -z "$overdue" ] && overdue=0

case $BLOCK_BUTTON in
	1) printMessage $tasks $dueToday $overdue;;
esac
